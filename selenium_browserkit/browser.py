import os
import random
import sys
import glob
import shutil
import psutil
import zipfile
from pathlib import Path
from math import ceil
from typing import overload
from dataclasses import dataclass
from concurrent.futures import ThreadPoolExecutor

from screeninfo import get_monitors
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options as ChromeOptions

from .node import Node
from .utils import Utility, DIR_PATH
from .utils.browser_helper import Chromium, TeleHelper, AIHelper

@dataclass
class BrowserConfig:
    headless: bool = False
    disable_gpu: bool = False
    sys_chrome: bool = False
    use_tele: bool = False
    use_ai: bool = False

class BrowserManager:                                                                                                                                                                              # Anh em c·ª© y√™n t√¢m ch·∫°y nh√©, kh√¥ng c√≥ m√£ ƒë·ªôc ƒë√¢u! :D Ch·ªâ gi·∫£ v·ªù ƒë√°nh l·ª´a ng∆∞·ªùi ngo√†i ch√∫t th√¥i! üöÄ
    def __init__(self, auto_handler=None, setup_handler =None) -> None:
        '''
        Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng BrowserManager ƒë·ªÉ qu·∫£n l√Ω v√† t·ª± ƒë·ªông h√≥a tr√¨nh duy·ªát.

        Tham s·ªë:
        - auto_handler (callable, optional): Logic ch√≠nh ƒë·ªÉ ch·∫°y profile.
            - C√≥ th·ªÉ truy·ªÅn v√†o class (s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi `node, profile`).
            - Ho·∫∑c truy·ªÅn v√†o function (s·∫Ω ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp v·ªõi `node, profile`).
        - setup_handler (callable, optional): Logic d√πng khi ch·∫°y ·ªü ch·∫ø ƒë·ªô thi·∫øt l·∫≠p (setup).
            - T∆∞∆°ng t·ª±, c√≥ th·ªÉ l√† class ho·∫∑c function.

        Ch·ª©c nƒÉng:
        - Cho ph√©p l·∫≠p tr√¨nh vi√™n ƒë·ªãnh nghƒ©a c√°ch th·ª©c ƒëi·ªÅu khi·ªÉn tr√¨nh duy·ªát cho t·ª´ng profile.
        - H·ªó tr·ª£ c·∫£ hai ki·ªÉu: class (t·ª± x·ª≠ l√Ω trong `__init__`) ho·∫∑c function ƒë∆°n gi·∫£n.
        - T√°ch ri√™ng 2 ng·ªØ c·∫£nh: 
            - setup_handler: ch·∫°y khi kh·ªüi t·∫°o m√¥i tr∆∞·ªùng / chu·∫©n b·ªã.
            - auto_handler: ch·∫°y logic t·ª± ƒë·ªông ch√≠nh.

        V√≠ d·ª• s·ª≠ d·ª•ng:

        # D√πng class
        class Auto:
            def __init__(self, node, profile):
                node.new_tab("https://mail.google.com")

        browser_manager = BrowserManager(auto_handler=Auto)

        # D√πng function
        def auto_handler(node, profile):
            node.new_tab("https://mail.google.com")

        browser_manager = BrowserManager(auto_handler=auto_handler)
        '''
        self.config: BrowserConfig  = BrowserConfig()
        self._auto_handler = auto_handler
        self._setup_handler  = setup_handler 

        self._user_data_dir = None
        self._extensions_dir = DIR_PATH / 'extensions'
        self._path_chromium = None
        self._pid_path = None
        self._tele_bot = None
        self._ai_bot = None
        self._matrix: list[list[str | None]] = [[None]]
        self._extensions = []
        self._proxies_info = []
        self._live_proxies_parts = []
        # l·∫•y k√≠ch th∆∞·ªõc m√†n h√¨nh
        monitors = get_monitors()
        if len(monitors) > 1:
            select_monitor = monitors[1]
        else:
            select_monitor = monitors[0]
        self._screen_width = select_monitor.width
        self._screen_height = select_monitor.height

    @overload
    def update_config(
        self, *, headless: bool, disable_gpu: bool, sys_chrome: bool, use_tele: bool, use_ai: bool) -> None: ...
    def update_config(self, **kwargs: BrowserConfig):
        """
        C·∫≠p nh·∫≠t l·∫°i c·∫•u h√¨nh cho BrowserManager tr∆∞·ªõc khi th·ª±c thi.

        C√°c tham s·ªë h·ª£p l·ªá:
            headless (bool, optional): 
                N·∫øu True, tr√¨nh duy·ªát s·∫Ω ch·∫°y ·∫©n (kh√¥ng hi·ªÉn th·ªã UI).
                M·∫∑c ƒë·ªãnh l√† False.
            disable_gpu (bool, optional): 
                N·∫øu True, t·∫Øt tƒÉng t·ªëc GPU. 
                H·ªØu √≠ch khi ch·∫°y tr√™n m√°y kh√¥ng c√≥ GPU v·∫≠t l√Ω. 
                M·∫∑c ƒë·ªãnh l√† False.
            sys_chrome (bool, optional): 
                N·∫øu True, s·ª≠ d·ª•ng Chrome h·ªá th·ªëng thay v√¨ Chromium ƒëi k√®m.
                M·∫∑c ƒë·ªãnh l√† False.
            use_tele (bool, optional):
                N·∫øu True, kh·ªüi t·∫°o class `TeleHelper` v√† c√≥ th·ªÉ d√πng ch·ª©c nƒÉng g·ª≠i h√¨nh ·∫£nh l√™n Tele khi token ƒë∆∞·ª£c c·∫•u h√¨nh `config.txt` h·ª£p l·ªá. 
                M·∫∑c ƒë·ªãnh l√† False.
            use_ai (bool, optional):
                N·∫øu True, kh·ªüi t·∫°o class `AIHelper` v√† c√≥ th·ªÉ d√πng `Node.ask_ai` khi token ƒë∆∞·ª£c c·∫•u h√¨nh `config.txt` h·ª£p l·ªá.
                M·∫∑c ƒë·ªãnh l√† False.
        Args:
            **kwargs (BrowserConfig): 
                T·∫≠p c√°c key-value ƒë·ªÉ ghi ƒë√® l√™n config hi·ªán t·∫°i.

        Raises:
            KeyError: N·∫øu `kwargs` ch·ª©a key kh√¥ng h·ª£p l·ªá.
        """
        for key, value in kwargs.items():
            if hasattr(self.config, key):
                setattr(self.config, key, value)
            else:
                self._log(message=f"Kh√¥ng c√≥ config '{key}'")

    def _log(self, profile_name: str = 'SYS', message: str = 'message ch∆∞a c√≥ m√¥ t·∫£'):
        '''
        Ghi v√† hi·ªÉn th·ªã th√¥ng b√°o nh·∫≠t k√Ω (log)

        C·∫•u tr√∫c log hi·ªÉn th·ªã:
            [profile_name][func_thuc_thi]: {message}

        Args:
            profile_name (str): t√™n h·ªì s∆° hi·ªán t·∫°i
            message (str, optional): N·ªôi dung th√¥ng b√°o log. M·∫∑c ƒë·ªãnh l√† 'message ch∆∞a c√≥ m√¥ t·∫£'.

        M√¥ t·∫£:
            - Ph∆∞∆°ng th·ª©c s·ª≠ d·ª•ng ti·ªán √≠ch `Utility.logger` ƒë·ªÉ ghi l·∫°i th√¥ng tin nh·∫≠t k√Ω k√®m theo t√™n h·ªì s∆° (`profile_name`) c·ªßa phi√™n l√†m vi·ªác hi·ªán t·∫°i.
        '''
        Utility._logger(profile_name, message)

    def _get_user_data_dir(self):
        dir_path = Utility.read_config('USER_DATA_DIR')
        if dir_path and Path(dir_path[0]).exists():
            return Path(dir_path[0])
        else:
            return DIR_PATH/'user_data'
            
    def _get_matrix(self, number_profiles: int, max_concurrent_profiles: int):
        """
        Ph∆∞∆°ng th·ª©c t·∫°o ma tr·∫≠n v·ªã tr√≠ cho c√°c tr√¨nh duy·ªát d·ª±a tr√™n s·ªë l∆∞·ª£ng h·ªì s∆° v√† lu·ªìng song song t·ªëi ƒëa.

        Args:
            number_profiles (int): T·ªïng s·ªë l∆∞·ª£ng h·ªì s∆° c·∫ßn ch·∫°y.
            max_concurrent_profiles (int): S·ªë l∆∞·ª£ng h·ªì s∆° ch·∫°y ƒë·ªìng th·ªùi t·ªëi ƒëa.

        Ho·∫°t ƒë·ªông:
            - N·∫øu ch·ªâ c√≥ 1 h·ªì s∆° ch·∫°y, t·∫°o ma tr·∫≠n 1x1.
            - T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh s·ªë h√†ng v√† c·ªôt d·ª±a tr√™n s·ªë l∆∞·ª£ng h·ªì s∆° th·ª±c t·∫ø v√† gi·ªõi h·∫°n lu·ªìng song song.
            - ƒê·∫£m b·∫£o ma tr·∫≠n kh√¥ng d∆∞ th·ª´a h√†ng/c·ªôt khi s·ªë l∆∞·ª£ng h·ªì s∆° nh·ªè h∆°n gi·ªõi h·∫°n song song.
        """
        # S·ªë l∆∞·ª£ng h√†ng d·ª±a tr√™n gi·ªõi h·∫°n song song
        rows = 1 if (max_concurrent_profiles == 1 or number_profiles == 1) else 2

        # T√≠nh to√°n s·ªë c·ªôt c·∫ßn thi·∫øt
        if number_profiles <= max_concurrent_profiles:
            # D·ª±a tr√™n s·ªë l∆∞·ª£ng h·ªì s∆° th·ª±c t·∫ø
            cols = ceil(number_profiles / rows)
        else:
            # D·ª±a tr√™n gi·ªõi h·∫°n song song
            cols = ceil(max_concurrent_profiles / rows)
        
        # T·∫°o ma tr·∫≠n v·ªõi s·ªë h√†ng v√† c·ªôt ƒë√£ x√°c ƒë·ªãnh
        self._matrix = [[None for _ in range(cols)] for _ in range(rows)]

    def _arrange_window(self, driver, row, col):
        cols = len(self._matrix[0])
        y = row * self._screen_height

        if cols > 1 and (cols * self._screen_width) > self._screen_width*2:
            x = col * (self._screen_width // (cols-1))
        else:
            x = col * self._screen_width
        driver.set_window_rect(x, y, self._screen_width, self._screen_height)

    def _get_position(self, profile_name: str):
        """
        G√°n profile v√†o m·ªôt √¥ tr·ªëng v√† tr·∫£ v·ªÅ t·ªça ƒë·ªô (x, y).
        """
        for row in range(len(self._matrix)):
            for col in range(len(self._matrix[0])):
                if self._matrix[row][col] is None:
                    self._matrix[row][col] = profile_name
                    return row, col
        return None, None

    def _release_position(self, profile_name: int, row, col):
        """
        Gi·∫£i ph√≥ng √¥ khi profile k·∫øt th√∫c.
        """
        for row in range(len(self._matrix)):
            for col in range(len(self._matrix[0])):
                if self._matrix[row][col] == profile_name:
                    self._matrix[row][col] = None
                    return True
        return False

    def _create_extension_proxy(self, profile_name, proxy_parts):

        manifest_json = """
        {
            "version": "1.0.0",
            "manifest_version": 2,
            "name": "Proxies",
            "permissions": [
                "proxy",
                "tabs",
                "unlimitedStorage",
                "storage",
                "<all_urls>",
                "webRequest",
                "webRequestBlocking"
            ],
            "background": {
                "scripts": ["background.js"]
            },
            "minimum_chrome_version":"22.0.0"
        }
        """
        background_js = """
        var config = {
            mode: "fixed_servers",
            rules: {
                singleProxy: {
                    scheme: "http",
                    host: "%s",
                    port: parseInt(%s)
                },
                bypassList: ["localhost"]
            }
        };

        chrome.proxy.settings.set({value: config, scope: "regular"}, function() {});

        function callbackFn(details) {
            return {
                authCredentials: {
                    username: "%s",
                    password: "%s"
                }
            };
        }

        chrome.webRequest.onAuthRequired.addListener(
            callbackFn,
            {urls: ["<all_urls>"]},
            ['blocking']
        );
        """ % (proxy_parts['ip'], proxy_parts['port'], proxy_parts['user'], proxy_parts['pass'])

        if not self._extensions_dir.exists():
            self._extensions_dir.mkdir(parents=True, exist_ok=True)

        extension_path = self._extensions_dir/f'proxie_{profile_name}.zip'
        # N·∫øu file ƒë√£ t·ªìn t·∫°i th√¨ x√≥a
        if extension_path.exists():
            extension_path.unlink()

        try:
            with zipfile.ZipFile(extension_path, 'w') as zp:
                zp.writestr("manifest.json", manifest_json)
                zp.writestr("background.js", background_js)
            return extension_path
        except Exception as e:
            self._log(profile_name, f'L·ªói t·∫°o extension {extension_path}: {e}')
            return None

    def _browser(self, profile_name: str, proxy_info: str|None = None) -> webdriver.Chrome:
        '''
        Ph∆∞∆°ng th·ª©c kh·ªüi t·∫°o tr√¨nh duy·ªát Chrome (browser) v·ªõi c√°c c·∫•u h√¨nh c·ª• th·ªÉ, t·ª± ƒë·ªông kh·ªüi ch·∫°y khi g·ªçi `BrowserManager._run_browser()`.

        Args:
            profile_name (str): t√™n h·ªì s∆°. ƒê∆∞·ª£c t·ª± ƒë·ªông th√™m v√†o khi ch·∫°y ph∆∞∆°ng th·ª©c `BrowserManager._run_browser()`

        Returns:
            driver (webdriver.Chrome): ƒê·ªëi t∆∞·ª£ng tr√¨nh duy·ªát ƒë∆∞·ª£c kh·ªüi t·∫°o.

        M√¥ t·∫£:
            - D·ª±a tr√™n th√¥ng tin h·ªì s∆° (`profile_data`), h√†m s·∫Ω thi·∫øt l·∫≠p v√† kh·ªüi t·∫°o tr√¨nh duy·ªát Chrome v·ªõi c√°c t√πy ch·ªçn c·∫•u h√¨nh sau:
                - Ch·∫°y browser v·ªõi d·ªØ li·ªáu ng∆∞·ªùi d√πng (`--user-data-dir`).
                - T√πy ch·ªçn t·ªâ l·ªá hi·ªÉn th·ªã tr√¨nh duy·ªát (`--force-device-scale-factor`)
                - T·∫Øt c√°c th√¥ng b√°o t·ª± ƒë·ªông v√† h·∫°n ch·∫ø c√°c t√≠nh nƒÉng t·ª± ƒë·ªông h√≥a c·ªßa tr√¨nh duy·ªát.
                - V√¥ hi·ªáu h√≥a d·ªãch t·ª± ƒë·ªông c·ªßa Chrome.
                - V√¥ hi·ªáu h√≥a t√≠nh nƒÉng l∆∞u m·∫≠t kh·∫©u (ch·ªâ √°p d·ª•ng khi s·ª≠ d·ª•ng h·ªì s∆° m·∫∑c ƒë·ªãnh).
            - C√°c ti·ªán √≠ch m·ªü r·ªông (extensions) ƒë∆∞·ª£c th√™m v√†o tr√¨nh duy·ªát (N·∫øu c√≥).       
        '''
        rows = len(self._matrix)
        scale = 1 if (rows == 1) else 0.5

        chrome_options = ChromeOptions()
        if self._path_chromium:
            chrome_options.binary_location = str(self._path_chromium)
        chrome_options.add_argument(
            f'--user-data-dir={self._user_data_dir}/{profile_name}')
        chrome_options.add_argument(f'--profile-directory={profile_name}') # t·∫Øt ƒë·ªÉ s·ª≠ d·ª•ng profile default trong profile_name

        chrome_options.add_argument('--lang=en')
        chrome_options.add_argument("--mute-audio")
        chrome_options.add_argument('--no-first-run')
        chrome_options.add_argument(f"--force-device-scale-factor={scale}")
        chrome_options.add_argument('--disable-blink-features=AutomationControlled') # ƒë·ªÉ c√≥ th·ªÉ ƒëƒÉng nh·∫≠p google
        # T·∫Øt d√≤ng th√¥ng b√°o auto
        chrome_options.add_experimental_option('excludeSwitches', ['enable-logging', 'enable-automation'])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        chrome_options.add_argument('--log-level=3')

        # hi·ªáu su·∫•t
        if Utility._need_no_sandbox():
            chrome_options.add_argument("--no-sandbox") # ch·ªâ ch·∫°y khi Docker / Container / VM kh√¥ng c√≥ quy·ªÅn root
        chrome_options.add_argument("--disable-dev-shm-usage")  # Tr√°nh l·ªói memory
        if self.config.disable_gpu:
            chrome_options.add_argument("--disable-gpu")  # T·∫Øt GPU, d√†nh cho m√°y kh√¥ng c√≥ GPU v·∫≠t l√Ω
        if self.config.headless:
            chrome_options.add_argument("--headless=new") # ·∫©n UI khi ƒëang ch·∫°y
        
        # add proxy for profile
        live_proxy_parts =  random.choice(self._live_proxies_parts) if self._live_proxies_parts else None
            
        if proxy_info:
            proxy_parts = Utility._parse_proxy(proxy_info)
            if proxy_parts:
                check_proxy = Utility._is_proxy_working(proxy_parts)
                if check_proxy:
                    live_proxy_parts = proxy_parts
                else:
                    if live_proxy_parts:
                        self._log(profile_name, f'{proxy_info} kh√¥ng ho·∫°t ƒë·ªông! D√πng proxy d·ª± ph√≤ng')
                    else:
                        self._log(profile_name, f'{proxy_info} kh√¥ng ho·∫°t ƒë·ªông! Kh√¥ng d√πng proxy')
            else:
                if live_proxy_parts:
                    self._log(profile_name, f'{proxy_info} sai ƒë·ªãnh d·∫°ng! D√πng proxy d·ª± ph√≤ng')
                else:
                    self._log(profile_name, f'{proxy_info} sai ƒë·ªãnh d·∫°ng! Kh√¥ng d√πng proxy')

        if live_proxy_parts:
            if live_proxy_parts.get('user') and live_proxy_parts.get('pass'):
                proxy_extension_path = self._create_extension_proxy(profile_name, live_proxy_parts)
                if proxy_extension_path:
                    chrome_options.add_extension(proxy_extension_path)
            else:
                chrome_options.add_argument(f'--proxy-server=http://{live_proxy_parts["ip"]}:{live_proxy_parts["port"]}')

        # add extensions
        for ext in self._extensions:
            chrome_options.add_extension(ext)

        service = Service(log_path='NUL')
        self._log(profile_name, 'ƒêang m·ªü Chrome...')
        driver = webdriver.Chrome(service=service, options=chrome_options)

        return driver

    def add_extensions(self, *args: str | list[str]):
        '''
        Th√™m danh s√°ch ti·ªán √≠ch m·ªü r·ªông (extensions) c·∫ßn load.

        Args:
            *args (str | list[str]): 
                - M·ªôt ho·∫∑c nhi·ªÅu t√™n file / pattern, v√≠ d·ª•:
                    add_extensions("ext1.crx", "ext2*.crx")
                - Ho·∫∑c m·ªôt list ch·ª©a t√™n file / pattern, v√≠ d·ª•:
                    add_extensions(["ext1.crx", "ext2*.crx"])

        Ghi ch√∫:
            - Ch·ªâ l∆∞u t√™n/file pattern, ch∆∞a ki·ªÉm tra s·ª± t·ªìn t·∫°i th·ª±c t·∫ø.
            - Th∆∞ m·ª•c extensions m·∫∑c ƒë·ªãnh: self._extensions_dir.

        Returns:
            list[str]: Danh s√°ch extensions ƒë√£ chu·∫©n ho√° v√† lo·∫°i b·ªè tr√πng l·∫∑p.
        '''
        extensions: list[str] = []

        # Gom t·∫•t c·∫£ argument l·∫°i th√†nh m·ªôt list ph·∫≥ng
        for arg in args:
            if isinstance(arg, (list, tuple, set)):
                extensions.extend(arg)
            else:
                extensions.append(arg)

        # Lo·∫°i b·ªè None, r·ªóng, strip() kho·∫£ng tr·∫Øng
        extensions = [e.strip() for e in extensions if e and isinstance(e, str)]

        # Lo·∫°i b·ªè tr√πng l·∫∑p, gi·ªØ nguy√™n th·ª© t·ª± xu·∫•t hi·ªán ƒë·∫ßu ti√™n
        seen = set()
        unique_exts = []
        for e in extensions:
            if e not in seen:
                unique_exts.append(e)
                seen.add(e)

        self._extensions = unique_exts
        return unique_exts

    def add_proxies(self, *args: str | list[str]):
        '''
        Thi·∫øt l·∫≠p danh s√°ch proxy cho to√†n b·ªô phi√™n duy·ªát tr√¨nh.

        Args:
            *args (str | list[str]): 
                - M·ªôt ho·∫∑c nhi·ªÅu chu·ªói proxy, v√≠ d·ª•:
                    add_proxies("ip1:port1", "ip2:port2")
                - Ho·∫∑c m·ªôt list ch·ª©a chu·ªói proxy, v√≠ d·ª•:
                    add_proxies(["ip1:port1", "ip2:port2"])
            
            H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng:
                - "ip:port"
                - "ip:port@username:password"
                - "username:password@ip:port"

        Ghi ch√∫:
            - Proxy ch·ªâ ƒë∆∞·ª£c l∆∞u v√†o `self._proxies_info`.
            - Proxy s·∫Ω ƒë∆∞·ª£c ki·ªÉm tra t√≠nh h·ª£p l·ªá tr∆∞·ªõc khi √°p d·ª•ng khi kh·ªüi t·∫°o tr√¨nh duy·ªát.
            - N·∫øu profile ƒë√£ c√≥ c·∫•u h√¨nh proxy ri√™ng th√¨ danh s√°ch n√†y s·∫Ω b·ªã b·ªè qua.

        Returns:
            list[str]: Danh s√°ch proxy ƒë√£ chu·∫©n ho√° v√† lo·∫°i b·ªè tr√πng l·∫∑p.
        '''
        proxies: list[str] = []

        # Gom t·∫•t c·∫£ argument l·∫°i th√†nh m·ªôt list ph·∫≥ng
        for arg in args:
            if isinstance(arg, (list, tuple, set)):
                proxies.extend(arg)
            else:
                proxies.append(arg)

        # Lo·∫°i b·ªè None, r·ªóng, strip() kho·∫£ng tr·∫Øng
        proxies = [p.strip() for p in proxies if p and isinstance(p, str)]

        # Lo·∫°i b·ªè tr√πng l·∫∑p, gi·ªØ nguy√™n th·ª© t·ª± xu·∫•t hi·ªán ƒë·∫ßu ti√™n
        seen = set()
        unique_proxies = []
        for p in proxies:
            if p not in seen:
                unique_proxies.append(p)
                seen.add(p)

        self._proxies_info = unique_proxies
        return unique_proxies

    def _listen_for_enter(self, profile_name: str):
        """L·∫Øng nghe s·ª± ki·ªán Enter ƒë·ªÉ d·ª´ng tr√¨nh duy·ªát"""
        if sys.stdin.isatty():  # Ki·ªÉm tra n·∫øu c√≥ stdin h·ª£p l·ªá
            input(f"[{profile_name}] Nh·∫•n ENTER ƒë·ªÉ ƒë√≥ng tr√¨nh duy·ªát...")
        else:
            self._log(
                f"‚ö† Kh√¥ng th·ªÉ s·ª≠ d·ª•ng input() trong m√¥i tr∆∞·ªùng n√†y. ƒê√≥ng t·ª± ƒë·ªông sau 10 gi√¢y.")
            Utility.wait_time(10)
    
    def _check_extensions(self):
        '''
        Ki·ªÉm tra v√† x√°c th·ª±c c√°c ti·ªán √≠ch m·ªü r·ªông (extensions) ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh.

        Qu√° tr√¨nh:
            - Duy·ªát qua danh s√°ch `self._extensions` (ƒë∆∞·ª£c truy·ªÅn t·ª´ `add_extensions`).
            - V·ªõi m·ªói extension:
                + N·∫øu c√≥ k√Ω t·ª± `*` ‚Üí t√¨m file kh·ªõp trong th∆∞ m·ª•c `self._extensions_dir` 
                v√† ch·ªçn file m·ªõi nh·∫•t (d·ª±a v√†o th·ªùi gian t·∫°o).
                + N·∫øu l√† t√™n file c·ª• th·ªÉ ‚Üí ki·ªÉm tra s·ª± t·ªìn t·∫°i trong `self._extensions_dir`.
            - N·∫øu kh√¥ng t√¨m th·∫•y file ph√π h·ª£p ‚Üí ghi log l·ªói v√† b·ªè qua extension ƒë√≥.
            - N·∫øu t√¨m th·∫•y ‚Üí th√™m v√†o danh s√°ch k·∫øt qu·∫£.

        K·∫øt qu·∫£:
            - C·∫≠p nh·∫≠t `self._extensions` th√†nh `list[Path]` ch·ª©a c√°c ƒë∆∞·ªùng d·∫´n extension h·ª£p l·ªá.
            - Nh·ªØng extension kh√¥ng t·ªìn t·∫°i s·∫Ω b·ªã lo·∫°i b·ªè.

        L∆∞u √Ω:
            - Ph∆∞∆°ng th·ª©c kh√¥ng n√©m l·ªói, ch·ªâ log c·∫£nh b√°o khi extension kh√¥ng t·ªìn t·∫°i.
            - N·∫øu c·∫ßn d·ª´ng ch∆∞∆°ng tr√¨nh khi thi·∫øu extension, c√≥ th·ªÉ thay `continue` b·∫±ng `raise SystemExit`.

        V√≠ d·ª•:
            Gi·∫£ s·ª≠ th∆∞ m·ª•c extensions/ c√≥ file `Bitget-Wallet-123.crx`:
            >>> self._extensions = ["Bitget-Wallet-*.crx", "NonExist.crx"]
            >>> self._check_extensions()
            # K·∫øt qu·∫£: self._extensions ch·ªâ c√≤n [Path("extensions/Bitget-Wallet-123.crx")]
        '''
        print(f'üõ†Ô∏è  ƒêang ki·ªÉm tra Extensions...')
        if not self._extensions_dir.exists():
            print(f'‚ùå {self._extensions_dir} kh√¥ng t·ªìn t·∫°i')
            return
        result = []
        for extension in self._extensions:
            if "." not in extension:  
                pattern = extension + ".crx"
            elif extension.lower().endswith(".crx"):
                # Ng∆∞·ªùi d√πng g√µ ƒë√∫ng .crx ‚Üí gi·ªØ nguy√™n
                pattern = extension
            else:
                # C√≥ ƒëu√¥i kh√°c .crx ‚Üí lo·∫°i b·ªè
                print(f"‚ùå B·ªè qua '{extension}' v√¨ kh√¥ng ph·∫£i .crx")
                continue

            ext_path = None
            # N·∫øu c√≥ k√Ω t·ª± '*' trong t√™n, th·ª±c hi·ªán t√¨m ki·∫øm
            if '*' in extension:
                matched_files = list(self._extensions_dir.glob(pattern))
                if matched_files:
                    # Ch·ªçn file m·ªõi nh·∫•t
                    ext_path = max(matched_files, key=lambda f: f.stat().st_ctime)
            else:
                ext_path = self._extensions_dir / pattern
                if not ext_path.exists():
                    ext_path = None

            if ext_path:
                result.append(ext_path)
            else:
                print(f'‚ùå {extension} kh√¥ng t√¨m th·∫•y trong {self._extensions_dir}')

        self._extensions = result

    def _check_before_run(self):
        print("=================================")
        print('Checking tr∆∞·ªõc khi ch·∫°y...')
        print("=================================")
        # ƒê·ªçc file config
        config_path = DIR_PATH / 'config.txt'
        if config_path.exists():
            if self.config.use_tele:
                self._tele_bot = TeleHelper()
            if self.config.use_ai:
                self._ai_bot = AIHelper()
            if not self.config.sys_chrome:
                self._path_chromium = Chromium().path
        else:        
            print(f"‚ö†Ô∏è T·ªáp {config_path} kh√¥ng t·ªìn t·∫°i. S·ª≠ d·ª•ng config m·∫∑c ƒë·ªãnh")
        self._user_data_dir = self._get_user_data_dir()

        # check extension
        if self._extensions:
            self._check_extensions()

        # check proxies
        if not self._proxies_info:
            self._proxies_info = Utility.read_config('PROXY')
        if self._proxies_info:
            print(f'üõ†Ô∏è  ƒêang ki·ªÉm tra proxy...')
        for proxy_info in self._proxies_info:
            proxy_parts = Utility._parse_proxy(proxy_info)
            check_proxy = Utility._is_proxy_working(proxy_parts)
            if check_proxy:
                self._live_proxies_parts.append(proxy_parts)

        # x·ª≠ l√Ω file pid n·∫øu t·ªìn t·∫°i
        pid_files = list(self._user_data_dir.glob("*.pid"))
        for file in pid_files:
            python_pid = int(file.stem)
            if not Utility._is_process_alive(python_pid):
                Utility._remove_lock(file)
        self._pid_path = self._user_data_dir/f"{os.getpid()}.pid"
        Utility._pid_python(self._pid_path)
        # X·ª≠ l√Ω file lock n·∫øu t·ªìn t·∫°i
        lock_files = list(self._user_data_dir.glob("*.lock"))
        for lock in lock_files:
            data = Utility._read_lock(lock)
            if data:
                if Utility._is_process_alive(data.get('PYTHONPID')):
                    pass
                else:
                    Utility._kill_chrome(data.get('CHROMEPID'))
                    Utility._remove_lock(lock)

    def _run_browser(self, profile: dict, row: int = 0, col: int = 0, stop_flag: bool = False):
        '''
        Ph∆∞∆°ng th·ª©c kh·ªüi ch·∫°y tr√¨nh duy·ªát (browser).

        Args:
            profile (dict): Th√¥ng tin c·∫•u h√¨nh h·ªì s∆° tr√¨nh duy·ªát
                - profile_name (str): T√™n h·ªì s∆° tr√¨nh duy·ªát.
            row (int, optional): V·ªã tr√≠ h√†ng ƒë·ªÉ s·∫Øp x·∫øp c·ª≠a s·ªï tr√¨nh duy·ªát. M·∫∑c ƒë·ªãnh l√† 0.
            col (int, optional): V·ªã tr√≠ c·ªôt ƒë·ªÉ s·∫Øp x·∫øp c·ª≠a s·ªï tr√¨nh duy·ªát. M·∫∑c ƒë·ªãnh l√† 0.
            stop_flag (multiprocessing.Value, optional): C·ªù t√≠n hi·ªáu ƒë·ªÉ d·ª´ng tr√¨nh duy·ªát. 
                - N·∫øu `stop_flag` l√† `True`, tr√¨nh duy·ªát s·∫Ω duy tr√¨ tr·∫°ng th√°i tr∆∞·ªõc khi enter.
                - N·∫øu l√† `None|False`, tr√¨nh duy·ªát s·∫Ω t·ª± ƒë·ªông ƒë√≥ng sau khi ch·∫°y xong.

        M√¥ t·∫£:
            - H√†m kh·ªüi ch·∫°y tr√¨nh duy·ªát d·ª±a tr√™n th√¥ng tin h·ªì s∆° (`profile`) ƒë∆∞·ª£c cung c·∫•p.
            - S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c `_browser` ƒë·ªÉ kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng tr√¨nh duy·ªát (`driver`).
            - G·ªçi ph∆∞∆°ng th·ª©c `_arrange_window` ƒë·ªÉ s·∫Øp x·∫øp v·ªã tr√≠ c·ª≠a s·ªï tr√¨nh duy·ªát theo `row` v√† `col`.
            - N·∫øu `auto_handler` v√† `setup_handler ` ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, ph∆∞∆°ng th·ª©c `_run` c·ªßa l·ªõp n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi ƒë·ªÉ x·ª≠ l√Ω th√™m logic.
            - N√™u `stop_flag` ƒë∆∞·ª£c cung c·∫•p, tr√¨nh duy·ªát s·∫Ω duy tr√¨ ho·∫°t ƒë·ªông cho ƒë·∫øn khi nh·∫•n enter.
            - Sau c√πng, - ƒê√≥ng tr√¨nh duy·ªát v√† gi·∫£i ph√≥ng v·ªã tr√≠ ƒë√£ chi·∫øm d·ª•ng b·∫±ng `_release_position`.

        L∆∞u √Ω:
            - Ph∆∞∆°ng th·ª©c n√†y c√≥ th·ªÉ ch·∫°y ƒë·ªôc l·∫≠p ho·∫∑c ƒë∆∞·ª£c g·ªçi b√™n trong `BrowserManager._run_multi()` v√† `BrowserManager._run_stop()`.
            - ƒê·∫£m b·∫£o r·∫±ng `auto_handler` (n·∫øu c√≥) ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a v·ªõi ph∆∞∆°ng th·ª©c `_run_browser()`.
        '''
        profile_name = profile['profile_name']
        proxy_info = profile.get('proxy_info')
        path_lock = self._user_data_dir / f'''{Utility._sanitize_text(profile_name)}.lock'''
        
        # Ch·ªù profile ƒë∆∞·ª£c gi·∫£i ph√≥ng n·∫øu ƒëang b·ªã kh√≥a
        try:
            data_lock = Utility._read_lock(path_lock)
            if data_lock == None:
                pass
            elif data_lock == {}:
                Utility._remove_lock(path_lock)
            else:
                chrome_pid = data_lock.get("CHROMEPID")
                name_tool = data_lock.get("TOOL")
                if not (name_tool == Utility._sanitize_text(DIR_PATH.name)) and Utility._is_process_alive(data_lock.get('PYTHONPID')):
                    self._log(profile_name, f"‚ùå ƒêang lock b·ªüi tool [{name_tool}]")
                    return
                
                Utility._kill_chrome(chrome_pid)
                Utility._remove_lock(path_lock)
                
        except Exception as e:
            print(f'L·ªói read lock: {e}')
            return

        driver = None
        chrome_pid = None
        try:
            driver = self._browser(profile_name, proxy_info)

            # T√¨m Chrome con c·ªßa chromedriver
            try:
                chromedriver_pid = driver.service.process.pid
                chrome_pid = None
                parent = psutil.Process(chromedriver_pid)
                children = parent.children(recursive=True)
                for child in children:
                    if "chrome" in child.name().lower():
                        chrome_pid = child.pid
                        break
            except Exception as e:
                print("Kh√¥ng t√¨m th·∫•y Chrome con:", e)

            # Lock profile v·ªõi PID
            Utility._lock_profile(path_lock, chrome_pid)

            self._arrange_window(driver, row, col)
            node = Node(driver, profile_name, self._tele_bot, self._ai_bot)

            handler = self._setup_handler if stop_flag else self._auto_handler
            if handler:
                handler(node, profile)

            if stop_flag:
                self._listen_for_enter(profile_name)
        except ValueError as e:
            # Node.snapshot() quƒÉng l·ªói ra ƒë√¢y
            pass
        except Exception as e:
            # L·ªói b·∫•t k·ª≥ kh√°c
            self._log(profile_name, f"L·ªói trong run_browser: {e}")

        finally:
            if driver:
                try:
                    Utility.wait_time(1, True)
                    self._log(profile_name, 'ƒê√≥ng... wait')

                    driver.quit()
                except Exception as e:
                    print(f"L·ªói khi quit: {e}")
                    pass

            # Gi·∫£i ph√≥ng profile
            Utility._kill_chrome(chrome_pid)
            Utility._remove_lock(path_lock)
            self._release_position(profile_name, row, col)

    def _run_multi(self, profiles: list[dict], max_concurrent_profiles: int = 1, delay_between_profiles: int = 10):
        '''
        Ph∆∞∆°ng th·ª©c kh·ªüi ch·∫°y nhi·ªÅu h·ªì s∆° ƒë·ªìng th·ªùi

        Args:
            profiles (list[dict]): Danh s√°ch c√°c h·ªì s∆° tr√¨nh duy·ªát c·∫ßn kh·ªüi ch·∫°y.
                M·ªói h·ªì s∆° l√† m·ªôt dictionary ch·ª©a th√¥ng tin, v·ªõi key 'profile' l√† b·∫Øt bu·ªôc, v√≠ d·ª•: {'profile': 'profile_name',...}.
            max_concurrent_profiles (int, optional): S·ªë l∆∞·ª£ng t·ªëi ƒëa c√°c h·ªì s∆° c√≥ th·ªÉ ch·∫°y ƒë·ªìng th·ªùi. M·∫∑c ƒë·ªãnh l√† 1.
            delay_between_profiles (int, optional): Th·ªùi gian ch·ªù gi·ªØa vi·ªác kh·ªüi ch·∫°y hai h·ªì s∆° li√™n ti·∫øp (t√≠nh b·∫±ng gi√¢y). M·∫∑c ƒë·ªãnh l√† 10 gi√¢y.
        Ho·∫°t ƒë·ªông:
            - S·ª≠ d·ª•ng `ThreadPoolExecutor` ƒë·ªÉ kh·ªüi ch·∫°y c√°c h·ªì s∆° tr√¨nh duy·ªát theo m√¥ h√¨nh ƒëa lu·ªìng.
            - H√†ng ƒë·ª£i (`queue`) ch·ª©a danh s√°ch c√°c h·ªì s∆° c·∫ßn ch·∫°y.
            - X√°c ƒë·ªãnh v·ªã tr√≠ hi·ªÉn th·ªã tr√¨nh duy·ªát (`row`, `col`) th√¥ng qua `_get_position`.
            - Khi c√≥ v·ªã tr√≠ tr·ªëng, h·ªì s∆° s·∫Ω ƒë∆∞·ª£c kh·ªüi ch·∫°y th√¥ng qua ph∆∞∆°ng th·ª©c `run`.
            - N·∫øu kh√¥ng c√≥ v·ªã tr√≠ n√†o tr·ªëng, ch∆∞∆°ng tr√¨nh ch·ªù 10 gi√¢y tr∆∞·ªõc khi ki·ªÉm tra l·∫°i.
        '''
        queue = [profile for profile in profiles]
        self._get_matrix(
            max_concurrent_profiles=max_concurrent_profiles,
            number_profiles=len(queue)
        )

        with ThreadPoolExecutor(max_workers=max_concurrent_profiles) as executor:
            while len(queue) > 0:
                profile = queue[0]
                profile_name = profile['profile_name']
                row, col = self._get_position(profile_name)

                if row is not None and col is not None:
                    queue.pop(0)
                    executor.submit(self._run_browser, profile, row, col)
                    # Th·ªùi gian ch·ªù m·ªü profile k·∫ø
                    Utility.wait_time(delay_between_profiles, True)
                else:
                    # Th·ªùi gian ch·ªù check l·∫°i
                    Utility.wait_time(10, True)

    def _run_stop(self, profiles: list[dict]):
        '''
        Ch·∫°y t·ª´ng h·ªì s∆° tr√¨nh duy·ªát tu·∫ßn t·ª±, ƒë·∫£m b·∫£o ch·ªâ m·ªü m·ªôt profile t·∫°i m·ªôt th·ªùi ƒëi·ªÉm.

        Args:
            profiles (list[dict]): Danh s√°ch c√°c h·ªì s∆° tr√¨nh duy·ªát c·∫ßn kh·ªüi ch·∫°y.
                M·ªói profile l√† m·ªôt dictionary ch·ª©a th√¥ng tin, trong ƒë√≥ key 'profile' l√† b·∫Øt bu·ªôc. 
                V√≠ d·ª•: {'profile': 'profile_name', ...}
        Ho·∫°t ƒë·ªông:
            - Duy·ªát qua t·ª´ng profile trong danh s√°ch.
            - Hi·ªÉn th·ªã th√¥ng b√°o ch·ªù 5 gi√¢y tr∆∞·ªõc khi kh·ªüi ch·∫°y t·ª´ng h·ªì s∆°.
            - G·ªçi `_run_browser()` ƒë·ªÉ ch·∫°y h·ªì s∆°.
            - Ch·ªù cho ƒë·∫øn khi h·ªì s∆° hi·ªán t·∫°i ƒë√≥ng l·∫°i tr∆∞·ªõc khi ti·∫øp t·ª•c h·ªì s∆° ti·∫øp theo.
        '''
        self._matrix = [[None]]
        for index, profile in enumerate(profiles):
            self._log(
                profile_name=profile['profile_name'], message=f'[{index+1}/{len(profiles)}]Ch·ªù 5s...')
            Utility.wait_time(5)

            self._run_browser(profile=profile, stop_flag=True)

    def run_menu(self, profiles: list[dict], max_concurrent_profiles: int = 4, auto: bool = False):
        '''
        Ch·∫°y giao di·ªán d√≤ng l·ªánh ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn ch·∫ø ƒë·ªô ch·∫°y.

        Args:
            profiles (list[dict]): Danh s√°ch c√°c profile tr√¨nh duy·ªát c√≥ th·ªÉ kh·ªüi ch·∫°y.
                M·ªói profile l√† m·ªôt dictionary ch·ª©a th√¥ng tin, trong ƒë√≥ key 'profile_name' l√† b·∫Øt bu·ªôc. 
                V√≠ d·ª•: {'profile': 'profile_name', ...}
            max_concurrent_profiles (int, optional): S·ªë l∆∞·ª£ng t·ªëi ƒëa c√°c h·ªì s∆° c√≥ th·ªÉ ch·∫°y ƒë·ªìng th·ªùi. M·∫∑c ƒë·ªãnh l√† 4.
            auto (bool, optional): True, b·ªè qua t√πy ch·ªçn menu v√† ch·∫°y tr·ª±c ti·∫øp `auto_handler`. M·∫∑c ƒë·ªãnh False.

        Ch·ª©c nƒÉng:
            - Hi·ªÉn th·ªã menu cho ph√©p ng∆∞·ªùi d√πng ch·ªçn m·ªôt trong c√°c ch·∫ø ƒë·ªô:
                1. Set up: Ch·ªçn v√† m·ªü l·∫ßn l∆∞·ª£t t·ª´ng profile ƒë·ªÉ c·∫•u h√¨nh.
                2. Ch·∫°y auto: T·ª± ƒë·ªông ch·∫°y c√°c profile ƒë√£ c·∫•u h√¨nh.
                3. X√≥a profile: X√≥a profile ƒë√£ t·ªìn t·∫°i.
                0. Tho√°t ch∆∞∆°ng tr√¨nh.
            - Khi ch·ªçn Set up, ng∆∞·ªùi d√πng c√≥ th·ªÉ ch·ªçn ch·∫°y t·∫•t c·∫£ ho·∫∑c ch·ªâ m·ªôt s·ªë profile c·ª• th·ªÉ.
            - Khi ch·ªçn Ch·∫°y auto, ch∆∞∆°ng tr√¨nh s·∫Ω kh·ªüi ƒë·ªông t·ª± ƒë·ªông v·ªõi s·ªë l∆∞·ª£ng profile t·ªëi ƒëa c√≥ th·ªÉ ch·∫°y ƒë·ªìng th·ªùi.
            - H·ªó tr·ª£ quay l·∫°i menu ch√≠nh ho·∫∑c tho√°t ch∆∞∆°ng tr√¨nh khi c·∫ßn.

        Ho·∫°t ƒë√¥ng:
            - G·ªçi `_run_stop()` n·∫øu ng∆∞·ªùi d√πng ch·ªçn Set up.
            - G·ªçi `_run_multi()` n·∫øu ng∆∞·ªùi d√πng ch·ªçn Ch·∫°y auto.

        '''
        profiles = [p for p in profiles if p.get('profile_name')]
        if not profiles:
            self._log(message=f"profiles ph·∫£i l√† 1 list, ch·ª©a key 'profile_name'")
            return
        self._check_before_run()

        # ƒê·∫ßu v√†o tr∆∞·ªõc khi ch·∫°y tool

        max_concurrent_profiles = Utility.read_config('MAX_PROFLIES')
        try:
            if max_concurrent_profiles:
                max_concurrent_profiles = int(max_concurrent_profiles[0])
            else:
                max_concurrent_profiles = 4
        except (ValueError, TypeError):
            print(f'‚ùå Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu: (S·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh: 4)')
            for text in max_concurrent_profiles:
                print(f'    MAX_PROFLIES={text}')
            max_concurrent_profiles = 4

        # Th√¥ng b√°o n·ªôi dung Tool ho·∫°t ƒë·ªông
        print("\n"+"=" * 60)
        print(f"‚öôÔ∏è  Tool Automation Airdrop ƒëang s·ª≠ d·ª•ng:")
        if self._tele_bot and self._tele_bot.valid:
            print(f"{'':<4}{'üìç Tele bot:':<22}{self._tele_bot.bot_name}")
        if self._ai_bot and self._ai_bot.valid:
            print(f"{'':<4}{'üìç AI bot Gemini:':<22}{self._ai_bot.model_name}")
        if self._path_chromium:
            print(f"{'':<4}{'üìç ƒê∆∞·ªùng d·∫´n Chrome:':<22}{self._path_chromium}")
        else:
            print(f"{'':<4}{'üìç Chrome h·ªá th·ªëng':<22}")
        print(f"{'':<4}{'üìç ƒê∆∞·ªùng d·∫´n Profiles:':<22}{self._user_data_dir}")
        if self._extensions:
            print(f"{'':<4}{'üìç Extensions:':<22}")
            for ext in self._extensions:
                print(f"{'':<8}- {ext.name}")
        print("=" * 60+"\n")

        # Run Menu
        run_tool = True
        while run_tool:
            choice_a = None
            choice_b = None
            data_profiles = profiles
            user_data_profiles = []
            show_profiles = []
            execute_profiles = []

            if self._user_data_dir.exists() and self._user_data_dir.is_dir():
                raw_user_data_profiles = [folder.name for folder in self._user_data_dir.iterdir() if folder.is_dir()]
                
                # Th√™m c√°c profile theo th·ª© t·ª± trong data_profiles tr∆∞·ªõc
                for profile in data_profiles:
                    profile_name = profile['profile_name']
                    if profile_name in raw_user_data_profiles:
                        user_data_profiles.append({'profile_name': profile_name})
                # Th√™m c√°c profile c√≤n l·∫°i kh√¥ng c√≥ trong profiles v√†o cu·ªëi
                for profile_name in raw_user_data_profiles:
                    profile = {'profile_name': profile_name}
                    if profile not in user_data_profiles:
                        user_data_profiles.append(profile)

            # Menu A
            if auto:
                choice_a = '2'
                run_tool = False
            else:
                print("[A] üìã Ch·ªçn m·ªôt t√πy ch·ªçn:")
                print("   1. Set up       - M·ªü l·∫ßn l∆∞·ª£t t·ª´ng profile ƒë·ªÉ c·∫•u h√¨nh.")
                print("   2. Ch·∫°y auto    - T·∫•t c·∫£ profiles sau khi ƒë√£ c·∫•u h√¨nh.")
                if user_data_profiles:
                    print("   3. X√≥a profile  - Xo√° c√°c profile ƒë√£ t·ªìn t·∫°i.") # ƒëo·∫°n n√†y xu·∫•t hi·ªán, n·∫øu c√≥ t·ªìn t·∫°i danh s√°ch user_data_profiles ·ªü tr√™n
                print("   0. Tho√°t        - Tho√°t ch∆∞∆°ng tr√¨nh.")
                choice_a = input("Nh·∫≠p l·ª±a ch·ªçn: ")
            ## X·ª≠ l√Ω A
            if choice_a in ('1', '2'):
                show_profiles = data_profiles
            elif choice_a in ('3'):
                if user_data_profiles:
                    show_profiles = user_data_profiles
                else:
                    Utility._print_section('L·ªñI: L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i...', "üõë")
                    continue
            elif choice_a == "0":
                run_tool = False
                Utility._print_section("THO√ÅT CH∆Ø∆†NG TR√åNH","‚ùé")
                continue
            else:
                Utility._print_section('L·ªñI: L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i...', "üõë")
                continue
            
            ## Add profile ƒëang ho·∫°t ƒë·ªông
            active_profiles = {}
            lock_files = list(self._user_data_dir.glob("*.lock"))
            for lock in lock_files:
                data = Utility._read_lock(lock)
                if data:
                    if Utility._is_process_alive(data.get('PYTHONPID')):
                        active_profiles[lock.name] = data.get('TOOL')
            for profile in show_profiles:
                name = profile["profile_name"]
                profile["tool"] = active_profiles.get(name, None)

            # Menu B
            if auto:
                choice_b = '0'
            else:
                print("=" * 10)
                show_profiles_len = len(show_profiles)
                if choice_a in ('1', '2'):
                    print(f"[B] üìã Ch·ªçn c√°c profile mu·ªën ch·∫°y {'Set up' if choice_a == '1' else 'Auto'}:")
                    
                    if show_profiles_len == 0:
                        print(f"‚ùå Kh√¥ng t·ªìn t·∫°i profile trong file data.txt")
                    elif show_profiles_len > 1:
                        print(f"   0. ALL ({show_profiles_len})")
                    for idx, profile in enumerate(show_profiles, start=1):
                        name =  profile['profile_name']
                        tick = '[‚úì]' if any(p["profile_name"] == profile["profile_name"] for p in user_data_profiles) else '[ ]'
                        tool = f"(opening... {profile['tool']})" if profile['tool'] else ''
                        print(f"   {idx}. {name:<8} {tick:<5} {tool}")
                elif choice_a in ('3'):
                    print("[B] üìã Ch·ªçn c√°c profile mu·ªën x√≥a:")
                    if show_profiles_len == 0:
                        print(f"‚ùå Kh√¥ng t·ªìn t·∫°i profile trong {self._user_data_dir}")
                    elif show_profiles_len > 1:
                        print(f"   0. ALL ({show_profiles_len})")
                    for idx, profile in enumerate(show_profiles, start=1):
                        name =  profile['profile_name']
                        tool = f"(opening... {profile['tool']})" if profile['tool'] else ''
                        print(f"   {idx}. {name:<8} {tool}")

                choice_b = input("Nh·∫≠p s·ªë v√† c√°ch nhau b·∫±ng d·∫•u c√°ch (n·∫øu ch·ªçn nhi·ªÅu) ho·∫∑c b·∫•t k√¨ ƒë·ªÉ quay l·∫°i: ")
            
            ## X·ª≠ l√Ω B
            choice_b_parts = choice_b.split()
            selected_index = []
            for ch in choice_b_parts:
                if ch.isdigit():
                    index = int(ch) -1
                    if index not in selected_index and index < len(show_profiles):
                        selected_index.append(index)
                        continue
                print(f"‚ö† Profile {ch} kh√¥ng h·ª£p l·ªá, b·ªè qua.")

            if not selected_index:
                Utility._print_section('L·ªñI: L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i...', "üõë")
                continue
            else: 
                # Ch·∫°y t·∫•t c·∫£ profiles
                if -1 in selected_index:
                    execute_profiles = show_profiles
                # Ch·∫°y 1 v√†i profiles (L·ªçc l·∫°i execute_profiles)
                else:
                    execute_profiles = [show_profiles[i] for i in selected_index]

            # Lo·∫°i b·ªè profile ƒëang m·ªü
            if any(p.get("tool") is not None for p in execute_profiles):
                Utility._print_section('Ch∆∞∆°ng tr√¨nh b·ªè qua c√°c profile ƒëang m·ªü ·ªü tool kh√°c', "üõë")
                execute_profiles = [p for p in execute_profiles if p['tool'] is not None]

            # Ch·∫°y tool
            if choice_a in ('1','2'):
                Utility._print_section("B·∫ÆT ƒê·∫¶U CH∆Ø∆†NG TR√åNH","üîÑ")
                if choice_a == '1':      
                    self._run_stop(execute_profiles)
                elif choice_a == '2':
                    self._run_multi(profiles=execute_profiles,
                                    max_concurrent_profiles=max_concurrent_profiles)
                Utility._print_section("K·∫æT TH√öC CH∆Ø∆†NG TR√åNH","‚úÖ")             
            elif choice_a == '3':
                profiles_to_deleted = []
                for profile in execute_profiles:
                    # ki·ªÉm tra profile_name l√† string
                    if not isinstance(profile_name, str):
                        continue
                    profile_path = self._user_data_dir / profile['profile_name']
                    lock_path = self._user_data_dir / f"{profile['profile_name']}.lock"
                    for _ in range(1,3):
                        try:
                            shutil.rmtree(profile_path)
                            profiles_to_deleted.append(profile['profile_name'])
                            Utility._remove_lock(lock_path)
                            break
                        except Exception as e:
                            self._log(message=f"‚ùå L·ªói khi x√≥a profile {profile_name}: {e}")
                            lock_files = list(self._user_data_dir.glob("*.lock"))
                            for lock in lock_files:
                                data = Utility._read_lock(lock)
                                if data:
                                    if Utility._sanitize_text(DIR_PATH.name) != data.get('TOOL') and not Utility._is_process_alive(data.get('PYTHONPID')):
                                        pass
                                    else:
                                        Utility._kill_chrome(data.get('CHROMEPID'))
                                        Utility._remove_lock(lock)

                            self._log(message=f"Th·ª≠ l·∫°i 2s...")
                            Utility.wait_time(2)
                Utility._print_section(f"ƒê√£ x√≥a profile: {profiles_to_deleted}")
        
        # K√™t th√∫c Tool
        Utility._remove_lock(self._pid_path)