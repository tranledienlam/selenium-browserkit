import time
import psutil
import random
import inspect
import re
import os
import sys
import pathlib

from pathlib import Path
from typing import List, Optional

import requests

DIR_PATH = Path(sys.argv[0]).resolve().parent

class Utility:

    @staticmethod
    def wait_time(second: float = 5, fix: bool = False) -> None:
        '''
        ƒê·ª£i trong m·ªôt kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh.  V·ªõi gi√° tr·ªã dao ƒë·ªông t·ª´ -50% ƒë√™n 50%

        Args:
            seconds (int) = 2: S·ªë gi√¢y c·∫ßn ƒë·ª£i.
            fix (bool) = False: False s·∫Ω random, True kh√¥ng random
        '''
        try:
            sec = float(second)
            if sec < 0:
                raise ValueError
        except (ValueError, TypeError):
            Utility._logger('SYS', f'‚è∞ Gi√° tr·ªã second kh√¥ng h·ª£p l·ªá ({second}), d√πng m·∫∑c ƒë·ªãnh 5s')
            sec = 5.0

        if not fix:
            gap = 0.4
            sec = random.uniform(sec * (1 - gap), sec * (1 + gap))

        time.sleep(second)

    @staticmethod
    def timeout(second: int = 5):
        """
        Tr·∫£ v·ªÅ m·ªôt h√†m ki·ªÉm tra, cho bi·∫øt li·ªáu th·ªùi gian ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n timeout hay ch∆∞a.

        H√†m n√†y ƒë∆∞·ª£c d√πng ƒë·ªÉ thay th·∫ø bi·ªÉu th·ª©c l·∫∑p ki·ªÉu:
            start_time = time.time()
            while time.time() - start_time < seconds:

        Args:
            secons (int): Th·ªùi gian gi·ªõi h·∫°n t√≠nh b·∫±ng gi√¢y.

        Returns:
            Callable[[], bool]: M·ªôt h√†m kh√¥ng tham s·ªë, tr·∫£ v·ªÅ True n·∫øu v·∫´n c√≤n trong th·ªùi gian cho ph√©p, False n·∫øu ƒë√£ h·∫øt th·ªùi gian.
        
        C√°ch d√πng:
            check_timeout = timeout(5) while check_timeout(): ...
        """
        start_time = time.time()
        
        def checker():
            return time.time() - start_time < second
        
        return checker
        
    @staticmethod
    def _sanitize_text(text: str) -> str:
        """
        Bi·∫øn ƒë·ªïi chu·ªói b·∫•t k·ª≥ th√†nh chu·ªói 'an to√†n':
        - Ch·ªâ gi·ªØ a-z, A-Z, 0-9, '_', '-'
        - C√°c k√Ω t·ª± kh√°c thay b·∫±ng '_'
        """
        return re.sub(r'[^a-zA-Z0-9_\-]', '_', text)
    
    @staticmethod
    def _logger(profile_name: str = 'System', message: str = 'Ch∆∞a c√≥ m√¥ t·∫£ nh·∫≠t k√Ω', show_log: bool = True):
        '''
        Ghi v√† hi·ªÉn th·ªã th√¥ng b√°o nh·∫≠t k√Ω (log)
        
        C·∫•u tr√∫c log hi·ªÉn th·ªã:
            [profile_name][func_thuc_thi]: {message}
        
        Args:
            profile_name (str): t√™n h·ªì s∆° hi·ªán t·∫°i
            message (str): N·ªôi dung th√¥ng b√°o log.
            show_log (bool, option): cho ph√©p hi·ªÉn th·ªã nh·∫≠t k√Ω hay kh√¥ng. M·∫∑c ƒë·ªãnh: True (cho ph√©p)
        '''
        if show_log:
            func_name = inspect.stack()[2].function
            print(f'[{profile_name}][{func_name}]: {message}')
    
    @staticmethod
    def _print_section(title: str, icon: str = "üîî"):
        print("\n"+"=" * 60)
        print(f"{icon} {title.upper()}")
        print("=" * 60+"\n")

    @staticmethod
    def _need_no_sandbox() -> bool:
        # 1. N·∫øu l√† container Docker
        if pathlib.Path("/.dockerenv").exists():
            return True

        # 2. N·∫øu ch·∫°y trong CI/CD
        if os.environ.get("CI") == "true":
            return True

        # 3. N·∫øu user kh√¥ng c√≥ quy·ªÅn root (Linux) v√† kh√¥ng support user namespace
        if os.name == "posix" and os.geteuid() != 0:
            try:
                # check xem kernel c√≥ h·ªó tr·ª£ user namespace kh√¥ng
                with open("/proc/sys/kernel/unprivileged_userns_clone") as f:
                    if f.read().strip() == "0":
                        return True
            except FileNotFoundError:
                # file kh√¥ng t·ªìn t·∫°i => kh·∫£ nƒÉng cao kernel c≈©, ch∆∞a h·ªó tr·ª£
                return True

        return 
        
    @staticmethod
    def _parse_proxy(proxy_str: str):
        """
        H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng:
        - 38.153.152.244:9594
        - 38.153.152.244:9594@user:pass
        - user:pass@38.153.152.244:9594
        """
        # Tr∆∞·ªùng h·ª£p 1: user:pass@ip:port
        match = re.match(r"(?P<user>[^:@]+):(?P<pass>[^:@]+)@(?P<ip>[\d\.]+):(?P<port>\d+)", proxy_str)
        if match:
            return match.groupdict()
        
        # Tr∆∞·ªùng h·ª£p 2: ip:port@user:pass
        match = re.match(r"(?P<ip>[\d\.]+):(?P<port>\d+)@(?P<user>[^:@]+):(?P<pass>[^:@]+)", proxy_str)
        if match:
            return match.groupdict()
        
        # Tr∆∞·ªùng h·ª£p 3: ip:port (no auth)
        match = re.match(r"(?P<ip>[\d\.]+):(?P<port>\d+)$", proxy_str)
        if match:
            result = match.groupdict()
            result['user'] = None
            result['pass'] = None
            return result
        
        return None

    @staticmethod
    def _is_proxy_working(proxy_parts: dict|None = None):
        ''' Ki·ªÉm tra proxy c√≥ ho·∫°t ƒë·ªông kh√¥ng b·∫±ng c√°ch g·ª≠i request ƒë·∫øn m·ªôt trang ki·ªÉm tra IP
        
        Args:
            proxy_info (str, option): th√¥ng tin proxy ƒë∆∞·ª£c truy·ªÅn v√†o c√≥ d·∫°ng sau
                - "ip:port"
                - "username:password@ip:port"
        
        Returns:
            bool: True n·∫øu proxy ho·∫°t ƒë·ªông, False n·∫øu kh√¥ng.
        '''
        if not proxy_parts:
            return False
        
        if proxy_parts['user'] and proxy_parts['pass']:
            proxy_str = f"http://{proxy_parts['user']}:{proxy_parts['pass']}@{proxy_parts['ip']}:{proxy_parts['port']}"
        else:
            proxy_str = f"http://{proxy_parts['ip']}:{proxy_parts['port']}"

        proxies = {
            "http": f"{proxy_str}",
            "https": f"{proxy_str}",
        }
        
        test_url = "http://ip-api.com/json"  # API ki·ªÉm tra ƒë·ªãa ch·ªâ IP

        try:
            response = requests.get(test_url, proxies=proxies, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ Proxy ho·∫°t ƒë·ªông! IP: {response.json().get('query')}")
                return True
            else:
                print(f"‚ùå Proxy {proxy_str} kh√¥ng ho·∫°t ƒë·ªông! M√£ l·ªói: {response.status_code}")
                return False
        except requests.RequestException as e:
            print(f"‚ùå Proxy {proxy_str} l·ªói: {e}")
            return False

    @staticmethod
    def read_data(*field_names):
        '''
        L·∫•y d·ªØ li·ªáu t·ª´ t·ªáp data.txt

        Args:
            *field_names: t√™n c√°c tr∆∞·ªùng c·∫ßn l·∫•y

        Returns:
            list: danh s√°ch c√°c dictionary, m·ªói dictionary l√† m·ªôt profile

        X·ª≠ l√Ω d·ªØ li·ªáu:
            - N·∫øu parts trong d√≤ng √≠t h∆°n field_names, field_name ƒë∆∞·ª£c g√°n b·∫±ng None
            - N·∫øu parts trong d√≤ng nhi·ªÅu h∆°n field_names, ph·∫ßn t·ª≠ c√≤n l·∫°i s·∫Ω ƒë∆∞·ª£c g√°n v√†o `extra_fields`
            - D·ªØ li·ªáu ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng `profile_name`, k·∫øt th√∫c b·∫±ng `extra_fields` (optional) v√† `proxy_info` (optional)
        '''
        data_path = DIR_PATH /'data.txt'

        if not data_path.exists():
            print(f"File {data_path} kh√¥ng t·ªìn t·∫°i.")
            return []

        proxy_re = re.compile(r"^(\w+:\w+@)?\d{1,3}(?:\.\d{1,3}){3}:\d{1,5}(@\w+:\w+)?$")
        profiles = []

        with open(data_path, 'r') as file:
            data = file.readlines()

        for line in data:
            parts = [part.strip() for part in line.strip().split('|')]
            
            # Ki·ªÉm tra v√† t√°ch proxy n·∫øu c√≥
            proxy_info = parts[-1] if proxy_re.match(parts[-1]) else None
            if proxy_info:
                parts = parts[:-1]
                
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng d·ªØ li·ªáu
            if len(parts) < 1:
                print(f"Warning: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá - {line}")
                continue
                
            # T·∫°o dictionary v·ªõi c√°c tr∆∞·ªùng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
            profile = {}
            # G√°n gi√° tr·ªã cho c√°c field c√≥ trong parts
            for i, field_name in enumerate(field_names):
                if i < len(parts):
                    profile[field_name] = parts[i]
                else:
                    profile[field_name] = None

            profile['extra_fields'] = parts[len(field_names):]
            profile['proxy_info'] = proxy_info
            profiles.append(profile)
        
        return profiles
    
    @staticmethod
    def fake_data(numbers: int = 0):
        '''
        Sinh danh s√°ch profile gi·∫£ l·∫≠p ƒë·ªÉ test.

        Args:
            numbers (int): S·ªë l∆∞·ª£ng profile c·∫ßn t·∫°o (m·∫∑c ƒë·ªãnh = 0).

        Returns:
            list[dict]: Danh s√°ch c√°c profile d·∫°ng dict, 
                        m·ªói profile ch·ª©a √≠t nh·∫•t kh√≥a "profile_name".

        V√≠ d·ª•:
            >>> fake_data(3)
            [{'profile_name': '1'}, {'profile_name': '2'}, {'profile_name': '3'}]
        '''
        profiles = []
        for i in range(numbers):
            profile = {}
            profile['profile_name'] = str(i + 1)
            profiles.append(profile)
        return profiles
    
    @staticmethod
    def read_config(keyname: str) -> Optional[List]:
        """
        L·∫•y th√¥ng tin c·∫•u h√¨nh t·ª´ t·ªáp `config.txt`.

        File `config.txt` ph·∫£i n·∫±m trong c√πng th∆∞ m·ª•c v·ªõi t·ªáp m√£ ngu·ªìn. 

        Args:
            keyname (str): T√™n ƒë·ªãnh danh trong file `config.txt`, v√≠ d·ª•: 'USER_DATA_DIR', 'TELE_BOT', 'AI_BOT', 'MAX_PROFLIES', 'PROXY',...

        Returns:
            Optional[List]: 
                - Danh s√°ch gi√° tr·ªã ƒë∆∞·ª£c l·∫•y, kh√¥ng bao g·ªìm keyname.
                - Danh s√°ch r·ªóng n·∫øu kh√¥ng t√¨m th·∫•y d√≤ng n√†o ph√π h·ª£p.
                - None n·∫øu t·ªáp kh√¥ng t·ªìn t·∫°i ho·∫∑c g·∫∑p l·ªói khi ƒë·ªçc.
        
        Ghi ch√∫:
            - N·∫øu t·ªáp kh√¥ng t·ªìn t·∫°i, s·∫Ω ghi log v√† tr·∫£ v·ªÅ None.
            - N·∫øu d√≤ng kh√¥ng h·ª£p l·ªá (√≠t h∆°n 2 ph·∫ßn t·ª≠), s·∫Ω ghi c·∫£nh b√°o nh∆∞ng b·ªè qua d√≤ng ƒë√≥.
        """
        config_path = DIR_PATH / 'config.txt'
        results = []

        if not config_path.exists():
            return None
    
        try:
            with open(config_path, 'r',encoding='utf-8') as file:
                data = file.readlines()
            for line in data:
                if line.strip().startswith(keyname):
                    parts = line.strip().split('=', 1)
                    if len(parts) >= 2 and parts[-1]:
                        results.append(parts[-1].strip())
            
            return results
        
        except Exception as e:
            Utility._logger(message=f'L·ªói khi ƒë·ªçc t·ªáp {config_path}: {e}')
            return None

    @staticmethod
    def _wait_until_profile_free(profile_name: str, lock_path: Path, timeout: int = 60):
        """
        Ch·ªù cho ƒë·∫øn khi profile ƒë∆∞·ª£c gi·∫£i ph√≥ng (file lock kh√¥ng c√≤n t·ªìn t·∫°i).

        Args:
            lock_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file lock.
            timeout (int, optional): Th·ªùi gian ch·ªù t·ªëi ƒëa (gi√¢y). M·∫∑c ƒë·ªãnh l√† 60.

        Raises:
            TimeoutError: N·∫øu v∆∞·ª£t qu√° th·ªùi gian ch·ªù m√† profile v·∫´n b·ªã kh√≥a.
        """
        # C·∫ßn ki·ªÉm tra c√≥ t·ªìn t·∫°i chrome qu√° tr√¨nh kh√¥ng?
        # Ki·ªÉm tra n·∫øu file lock t·ªìn t·∫°i qu√° 12h th√¨ x√≥a file
        if os.path.exists(lock_path):
            try:
                print(f'üîç Ki·ªÉm tra tr·∫°ng th√°i üóùÔ∏è [{profile_name}.lock]')
                ctime = os.path.getctime(lock_path)
                now = time.time()
                # X√≥a lock, n·∫øu ƒë√£ t·ªìn t·∫°i h∆°n 12 ti·∫øng
                if now - ctime > 43200:  # 12h = 43200 gi√¢y
                    os.remove(lock_path)
            except Exception:
                raise 

        start_time = time.time()
        while os.path.exists(lock_path):
            if time.time() - start_time > timeout:
                raise TimeoutError(f"Ch·ªù qu√° {timeout}s nh∆∞ng [profile {profile_name}] v·∫´n b·ªã kh√≥a.")
            Utility.wait_time(10, True)
            print(f"üîí Profile [{profile_name}] ƒëang b·∫≠n, ch·ªù...")
    
    @staticmethod
    def _is_process_alive(pid: int) -> bool:
        try:
            pid = int(pid)
            process = psutil.Process(pid)
            return process.is_running() and process.status() != psutil.STATUS_ZOMBIE
        except psutil.NoSuchProcess:
            return False
        except Exception as e:
            print(f"L·ªói khi ki·ªÉm tra process {pid}: {e}")
            return False
    
    @staticmethod
    def _read_lock(path_lock: Path):
        """
        ƒê·ªçc file lock v√† tr·∫£ v·ªÅ dict ch·ª©a c√°c c·∫∑p key=value.

        Args:
            path_lock (Path): ƒê∆∞·ªùng d·∫´n t·ªõi file lock.

        Returns:
            dict[str, str] | None: Dict d·ªØ li·ªáu t·ª´ file lock, 
                                   ho·∫∑c None n·∫øu kh√¥ng t·ªìn t·∫°i / l·ªói.
        """
        try:
            if not path_lock.exists():
                return None

            result = {}
            with open(path_lock, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if not line or "=" not in line:
                        continue
                    k, v = line.split("=", 1)
                    result[k.strip().upper()] = v.strip()

            return result if result else None
        except Exception as e:
            print(f"L·ªói khi ƒë·ªçc lock file {path_lock}: {e}")
            return None
    
    @staticmethod
    def _kill_chrome(chrome_pid):
        """
        Kill Chrome process theo PID.

        Args:
            chrome_pid (int): PID c·ªßa process Chrome.

        Returns:
            bool: True n·∫øu kill th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i ho·∫∑c kh√¥ng t√¨m th·∫•y.
        """
        if not chrome_pid:
            return False

        try:
            chrome_pid = int(chrome_pid)
            proc = psutil.Process(chrome_pid)
            # Kill t·∫•t c·∫£ process con tr∆∞·ªõc (tr√°nh orphan)
            for child in proc.children(recursive=True):
                try:
                    child.kill()
                except Exception as e:
                    print(f"L·ªói khi kill child {child.pid}: {e}")
            proc.kill()
            return True
        except psutil.NoSuchProcess:
            # Chrome PID kh√¥ng t·ªìn t·∫°i.
            return True
        except Exception as e:
            print(f"L·ªói khi kill Chrome PID {chrome_pid}: {e}")
            return False
    
    @staticmethod
    def _remove_lock(lock_path: str):
        """
        X√≥a file lock ƒë·ªÉ gi·∫£i ph√≥ng profile.

        Args:
            lock_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file lock c·∫ßn x√≥a.
        """
        if os.path.exists(lock_path):
            try:
                os.remove(lock_path)
            except Exception as e:
                print(f"L·ªói khi x√≥a lock file {lock_path}: {e}")

    @staticmethod
    def _pid_python(tmp_path: Path):
        tmp_path.parent.mkdir(parents=True, exist_ok=True)
        with open(tmp_path, "w") as f:
            f.write(f"TOOL={Utility._sanitize_text(DIR_PATH.name)}\n")

    @staticmethod
    def _lock_profile(lock_path: Path, chrome_pid: str ):
        """
        T·∫°o file lock ƒë·ªÉ kh√≥a profile.

        Args:
            lock_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file lock c·∫ßn t·∫°o.
        """
        lock_path.parent.mkdir(parents=True, exist_ok=True)
        with open(lock_path, "w", encoding="utf-8") as f:
            f.write(f"CHROMEPID={chrome_pid}\n")
            f.write(f"TOOL={Utility._sanitize_text(DIR_PATH.name)}\n")
            f.write(f"PYTHONPID={os.getpid()}\n")