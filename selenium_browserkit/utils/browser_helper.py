import time
import ctypes
import subprocess
import sys

import urllib.request
from pathlib import Path
from io import BytesIO

import requests
from google import genai
from PIL import Image

from .core import Utility

class TeleHelper:
    def __init__(self) -> None:
        self.valid: bool = False
        self.bot_name = None
        self._chat_id = None
        self._token = None
        self._endpoint = None
        
        self._get_token()
        if not self.valid:
            print('‚ùå Telegram bot kh√¥ng ho·∫°t ƒë·ªông')

    def _check_token_valid(self) -> bool:
        if not self._token:
            return False

        url = f"{self._endpoint}/bot{self._token}/getMe"
        try:
            response = requests.get(url, timeout=5)
            data = response.json()
            if data.get("ok"):
                self.bot_name = f"@{data['result']['username']}"
                print(f"‚úÖ Telegram bot ho·∫°t ƒë·ªông: {self.bot_name}")
                return True
            else:
                return False
        except Exception as e:
            return False

    def _get_token(self):
        """
        ƒê·ªçc token Telegram t·ª´ file c·∫•u h√¨nh v√† kh·ªüi t·∫°o th√¥ng tin bot.

        N·∫øu ƒë·ªçc ƒë∆∞·ª£c token h·ª£p l·ªá (ƒë√∫ng ƒë·ªãnh d·∫°ng v√† ƒë∆∞·ª£c Telegram x√°c nh·∫≠n),
        th√¨ g√°n gi√° tr·ªã v√†o c√°c thu·ªôc t√≠nh:
            - self._chat_id
            - self._token
            - self._endpoint
            - self.valid = True

        Returns:
            bool: True n·∫øu t√¨m th·∫•y v√† x√°c th·ª±c ƒë∆∞·ª£c token, ng∆∞·ª£c l·∫°i False.
        """
        tokens = Utility.read_config('TELE_BOT')
        if tokens is not None:
            print(f'üõ†Ô∏è  ƒêang ki·ªÉm tra token Telegram bot...')
            for token in tokens:
                parts = [part.strip() for part in token.split('|')]
                if len(parts) >= 2:
                    self._chat_id = parts[0]
                    self._token = parts[1]
                    if len(parts) >= 3 and 'http' in parts[2]:
                        self._endpoint = parts[-1].rstrip('/')
                    else:
                        self._endpoint = 'https://api.telegram.org'
                    self.valid = self._check_token_valid()
                    if self.valid:
                        return True

            return False

    def send_photo(self, screenshot_png, message: str = 'kh·ªüi ƒë·ªông...'):
        """
        G·ª≠i tin nh·∫Øn ƒë·∫øn Telegram bot. Ki·ªÉm tra token tr∆∞·ªõc khi g·ª≠i.
        """
        if not self.valid or not all([self._chat_id, self._token]):
            Utility._logger(message="‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn: Token kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.")
            self.valid = False
            return False

        url = f"{self._endpoint}/bot{self._token}/sendPhoto"

        
        data = {'chat_id': self._chat_id,
                'caption': message}
        # G·ª≠i ·∫£nh l√™n Telegram
        try:
            with BytesIO(screenshot_png) as screenshot_buffer:
                files = {
                    'photo': ('screenshot.png', screenshot_buffer, 'image/png')
                }
                response = requests.post(url, files=files, data=data, timeout=5)
                res_json = response.json()

                if not res_json.get("ok"):
                    Utility._logger(message=f"‚ùå G·ª≠i ·∫£nh th·∫•t b·∫°i: {res_json}")
                    self.valid = False
                    return False

                return True

        except requests.exceptions.RequestException as e:
            Utility._logger(message=f"‚ùå L·ªói k·∫øt n·ªëi khi g·ª≠i tin nh·∫Øn: {e}")
            self.valid = False
            return False

class AIHelper:
    def __init__(self, model_name: str = "gemini-2.0-flash"):
        """
        Kh·ªüi t·∫°o AI Helper v·ªõi API key v√† model name
        
        Args:
            api_key (str): API key c·ªßa Gemini
            model_name (str, optional): T√™n model s·ª≠ d·ª•ng. M·∫∑c ƒë·ªãnh l√† "gemini-2.0-flash"
            
        Returns:
            bool: True n·∫øu AI ho·∫°t ƒë·ªông, False n·∫øu kh√¥ng ho·∫°t ƒë·ªông
        """
        self.is_working = False
        self.model_name = model_name
        self.valid = False
        self._token = None
        self._client = None
        
        self._get_token()
        if not self.valid:
            print('‚ùå AI bot kh√¥ng ho·∫°t ƒë·ªông')

    def _check_token_valid(self) -> bool:
        try:
            client = genai.Client(api_key=self._token)
            _ = client.models.list()
            self._client = client
            print("‚úÖ AI bot ho·∫°t ƒë·ªông")
            return True
        except Exception as e:
            print(f"‚ùå Token l·ªói: {e}")
            return False
        
    def _get_token(self):
        """
        ƒê·ªçc token AI Gemini t·ª´ file c·∫•u h√¨nh v√† kh·ªüi t·∫°o th√¥ng tin bot.

        N·∫øu ƒë·ªçc ƒë∆∞·ª£c token h·ª£p l·ªá (ƒë√∫ng ƒë·ªãnh d·∫°ng v√† ƒë∆∞·ª£c Telegram x√°c nh·∫≠n),
        th√¨ g√°n gi√° tr·ªã v√†o c√°c thu·ªôc t√≠nh:
            - self._chat_id
            - self._token
            - self._endpoint
            - self.valid = True

        Returns:
            bool: True n·∫øu t√¨m th·∫•y v√† x√°c th·ª±c ƒë∆∞·ª£c token, ng∆∞·ª£c l·∫°i False.
        """
        tokens = Utility.read_config('AI_BOT')
        if tokens is not None:
            print(f'üõ†Ô∏è  ƒêang ki·ªÉm tra token AI bot...')
            for token in tokens:
                self._token = token
                self.valid = self._check_token_valid()
                if self.valid:
                    return True

            return False

    @staticmethod
    def _process_image(image: Image.Image) -> Image.Image:
        """
        X·ª≠ l√Ω ·∫£nh ƒë·ªÉ t·ªëi ∆∞u k√≠ch th∆∞·ªõc tr∆∞·ªõc khi g·ª≠i l√™n AI
        
        Args:
            image (Image): ·∫¢nh c·∫ßn x·ª≠ l√Ω
            
        Returns:
            Image: ·∫¢nh ƒë√£ ƒë∆∞·ª£c resize
        """
        if type(image) == bytes:
            image = Image.open(BytesIO(image))
            
        width, height = image.size
        max_size = 384
        
        if width > height:
            new_width = max_size
            new_height = int(height * (max_size / width))
        else:
            new_height = max_size
            new_width = int(width * (max_size / height))

        new_size = (new_width, new_height)
        return image.resize(new_size, Image.Resampling.LANCZOS)
    
    def ask(self, prompt: str, img_bytes: bytes | None = None) -> tuple[str | None, str | None]:
        """
        G·ª≠i prompt v√† ·∫£nh l√™n AI ƒë·ªÉ ph√¢n t√≠ch
        
        Args:
            prompt (str): C√¢u h·ªèi ho·∫∑c y√™u c·∫ßu g·ª≠i ƒë·∫øn AI
            image (Image, optional): ·∫¢nh c·∫ßn ph√¢n t√≠ch. N·∫øu None, s·∫Ω tr·∫£ v·ªÅ None
            
        Returns:
            tuple[str | None, str | None]: 
                - Ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n: K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ AI ho·∫∑c None n·∫øu c√≥ l·ªói
                - Ph·∫ßn t·ª≠ th·ª© hai: Th√¥ng b√°o l·ªói ho·∫∑c None n·∫øu kh√¥ng c√≥ l·ªói
        """
        result = None
        try:
            if not self._client:
                return None, "AI bot kh√¥ng ho·∫°t ƒë·ªông"
            
            if img_bytes:
                image = Image.open(BytesIO(img_bytes))
                resized_image = self._process_image(image)
                response = self._client.models.generate_content(
                                    model=self.model_name,
                                    contents=[resized_image, prompt]
                                )
            else:
                response = self._client.models.generate_content(
                                    model=self.model_name,
                                    contents=prompt
                                )
            
            result = response.text
            return result, None
            
        except Exception as e:
            error_message = str(e)
            if "INVALID_ARGUMENT" in error_message or "API key not valid" in error_message:
                return None, f"API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i token."
            elif "blocked" in error_message.lower():
                return None, f"Prompt vi ph·∫°m ch√≠nh s√°ch n·ªôi dung - {error_message}"
            elif "permission" in error_message.lower():
                return None, f"Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p API - {error_message}"
            elif "quota" in error_message.lower() or "limit" in error_message.lower():
                return None, f"V∆∞·ª£t qu√° gi·ªõi h·∫°n t√†i nguy√™n - {error_message}"
            elif "timeout" in error_message.lower() or "deadline" in error_message.lower():
                return None, f"V∆∞·ª£t qu√° th·ªùi gian x·ª≠ l√Ω - {error_message}"
            else:
                return None, f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i y√™u c·∫ßu ƒë·∫øn AI - {error_message}"

class Chromium:
    """
    H·ªó tr·ª£ t·ª± ƒë·ªông t·∫£i v·ªÅ v√† gi·∫£i n√©n tr√¨nh duy·ªát Chromium t·ª´ GitHub, b·∫±ng c√¥ng c·ª• 7zr.exe.

    Ngu·ªìn github: https://github.com/macchrome/winchrome/releases
    """
    def __init__(self):
        f"""
        Kh·ªüi t·∫°o class v·ªõi c√°c tham s·ªë m·∫∑c ƒë·ªãnh:
        - URL t·∫£i Chromium v√† c√¥ng c·ª• 7zr.exe
        - T√™n t·ªáp n√©n v√† c√¥ng c·ª• gi·∫£i n√©n
        - ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c t·∫£i v√† th∆∞ m·ª•c ƒë√≠ch
        """
        self._CHROMIUM_URL = "https://github.com/macchrome/winchrome/releases/download/v136.7103.97-M136.0.7103.97-r1440670-Win64/ungoogled-chromium-136.0.7103.97-1_Win64.7z"
        self._EXE_URL = "https://www.7-zip.org/a/7zr.exe"
        self._FILE_CHROMIUM = "chromium136.7z"
        self._FILE_EXE = "7zr.exe"
        self._TARGET_FOLDER_NAME = "chromium136"
        self._DOWLOAD_PATH = Path(self._get_system_drive()) / 'chromium'

        self.path = self._setup()
    
    @staticmethod
    def _get_system_drive() -> Path:
        """
        L·∫•y ·ªï h·ªá ƒëi·ªÅu h√†nh hi·ªán t·∫°i (v√≠ d·ª•: 'C:\', 'D:\').
        Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng Path ƒë·∫°i di·ªán cho ·ªï ƒëƒ©a h·ªá th·ªëng.
        """
        buffer = ctypes.create_unicode_buffer(260)
        ctypes.windll.kernel32.GetWindowsDirectoryW(buffer, 260)
        return Path(Path(buffer.value).drive + "\\")

    def _show_download_progress(self, block_num, block_size, total_size):
        downloaded = block_num * block_size
        percent = downloaded / total_size * 100 if total_size > 0 else 0
        percent = percent if percent < 100 else 100
        bar_len = 40
        filled_len = int(bar_len * downloaded // total_size) if total_size else 0
        bar = '=' * filled_len + '-' * (bar_len - filled_len)
        sys.stdout.write(f"\rüì• [{bar}] {percent:5.1f}%")
        sys.stdout.flush()

    def _download_file(self, file_name: str, url: str) -> Path | None:
        """
        T·∫£i m·ªôt t·∫≠p tin t·ª´ URL n·∫øu ch∆∞a t·ªìn t·∫°i trong th∆∞ m·ª•c ch·ªâ ƒë·ªãnh.

        Args:
            file_name (str): T√™n t·ªáp c·∫ßn t·∫£i.
            url (str): URL ngu·ªìn.

        Returns:
            Path | None: Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n t·ªáp n·∫øu m·ªõi t·∫£i, None n·∫øu t·ªáp ƒë√£ t·ªìn t·∫°i.
        """
        file_path = self._DOWLOAD_PATH / file_name

        if file_path.exists():
            size = file_path.stat().st_size
            if size > 0:
                print(f"‚úÖ ƒê√£ t·ªìn t·∫°i {file_name}")
                return file_path
            else:
                print(f"‚ùå File l·ªói ({size} bytes). X√≥a file...")
                file_path.unlink(missing_ok=True)
        try:
            print(f"‚¨áÔ∏è ƒêang t·∫£i {file_name}...")
            urllib.request.urlretrieve(url, file_path, reporthook=self._show_download_progress)
            Utility.wait_time(2)
            
            if file_path.exists():
                if file_path.stat().st_size > 0:
                    print(f"‚úÖ T·∫£i {file_name} th√†nh c√¥ng")
                    return file_path
                else:
                    print(f"‚ùå File t·∫£i b·ªã l·ªói ({size} bytes). X√≥a file...")
                    file_path.unlink(missing_ok=True)
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y {file_path} ƒë√£ t·∫£i...")

        except Exception as e:
            print(f"‚ùå L·ªói qu√° tr√¨nh t·∫£i: {e}")
        
        return None
    
    def _delete_file(self, file_path: Path):
        """
        X√≥a m·ªôt t·ªáp n·∫øu t·ªìn t·∫°i.

        Args:
            file_path (Path): ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp c·∫ßn x√≥a.

        Returns:
            bool: True n·∫øu x√≥a th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i.
        """
        if file_path.exists() and file_path.is_file():
            try:
                file_path.unlink()
                return True
            except Exception as e:
                print(f"‚ùå Kh√¥ng th·ªÉ x√≥a file {file_path}: {e}")
        else:
            print(f"‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i: {file_path}")
        return False

    def _extract_7z_with_7zr(self, file_path: Path | None, tool_extract: Path | None)-> Path | None:
        """
        Gi·∫£i n√©n t·ªáp `.7z` b·∫±ng c√¥ng c·ª• `7zr.exe`, v√† t√¨m th∆∞ m·ª•c m·ªõi ƒë∆∞·ª£c t·∫°o sau khi gi·∫£i n√©n.

        Args:
            file_path (Path): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file `.7z`.
            tool_extract (Path): ƒê∆∞·ªùng d·∫´n ƒë·∫øn `7zr.exe`.

        Returns:
            Path | None: Tr·∫£ v·ªÅ th∆∞ m·ª•c m·ªõi ƒë∆∞·ª£c gi·∫£i n√©n, ho·∫∑c None n·∫øu th·∫•t b·∫°i.
        """
        before_folders = set(f.name for f in self._DOWLOAD_PATH.iterdir() if f.is_dir())

        timeout = time.time()+10
        if not (tool_extract and file_path):
            if not tool_extract:
               print(f"‚ùå tool_extract kh√¥ng th·ªÉ l√† None")
            if not file_path:
               print(f"‚ùå file_path kh√¥ng th·ªÉ l√† None") 
            return None
        
        while True:
            if tool_extract and tool_extract.exists():
                if file_path and file_path.exists() and (file_path.stat().st_size / (1024 *1024) > 100):
                    break
            if timeout - time.time() < 0:
                print(f'L·ªói kh√¥ng t√¨m th·∫•y ƒë·ªß 2 file: {self._FILE_CHROMIUM} (>100M) - {self._FILE_EXE} (500k)')
                return None
            Utility.wait_time(1)

        try:
            result = subprocess.run(
                [str(tool_extract), 'x', str(file_path), f'-o{self._DOWLOAD_PATH}', '-y'],
                capture_output=True, text=True
            )
        except Exception as e:
            Utility._logger(f'L·ªói gi·∫£i n√©n file: {e}')
            return None
        
        if result.returncode == 0:
            print("‚úÖ Gi·∫£i n√©n ho√†n t·∫•t.")
            self._delete_file(file_path)
            self._delete_file(tool_extract)
            after_folders = set(f.name for f in self._DOWLOAD_PATH.iterdir() if f.is_dir())
            new_folders = list(after_folders - before_folders)
            if new_folders:
                for name in new_folders:
                    if "ungoogled" in name.lower():
                        return self._DOWLOAD_PATH / name
                return self._DOWLOAD_PATH / new_folders[0]
            else:
                print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c m·ªõi.")
                return None
        else:
            print(f"‚ùå Gi·∫£i n√©n l·ªói: {result.stderr}")
            return None
    
    def _setup(self) -> Path | None:
        """
        H√†m ch√≠nh ƒë·ªÉ thi·∫øt l·∫≠p tr√¨nh duy·ªát Chromium:
        - T·∫°o th∆∞ m·ª•c t·∫£i n·∫øu ch∆∞a c√≥
        - Ki·ªÉm tra n·∫øu th∆∞ m·ª•c ƒë√≠ch ƒë√£ t·ªìn t·∫°i th√¨ b·ªè qua
        - N·∫øu ch∆∞a c√≥, t·∫£i xu·ªëng v√† gi·∫£i n√©n
        - ƒê·ªïi t√™n th∆∞ m·ª•c gi·∫£i n√©n th√†nh th∆∞ m·ª•c ƒë√≠ch

        Returns:
            Path | None: Tr·∫£ v·ªÅ path chrome.exe, ho·∫∑c None n·∫øu th·∫•t b·∫°i.
        """
        self._DOWLOAD_PATH.mkdir(parents=True, exist_ok=True)

        target_dir = self._DOWLOAD_PATH / self._TARGET_FOLDER_NAME
        target_chromium = target_dir / 'chrome.exe'

        if target_chromium.exists():
            return target_chromium
        else:
            chromium_path = self._download_file(self._FILE_CHROMIUM, self._CHROMIUM_URL)
            exe_path = self._download_file(self._FILE_EXE, self._EXE_URL)
            if chromium_path and exe_path:
                extracted_folder = self._extract_7z_with_7zr(chromium_path, exe_path)
                if extracted_folder:
                    extracted_chromium = extracted_folder / 'chrome.exe'
                    if (extracted_chromium).exists():
                        extracted_folder.rename(target_dir)
                        if target_chromium.exists():
                            print(f"‚úÖ Phi√™n b·∫£n chromium l∆∞u t·∫°i: {target_dir}")
                            return target_chromium
                        else:
                            print(f"‚ùå Kh√¥ng t√¨m th·∫•y {target_chromium}")
                    else:
                        print(f"‚ùå Kh√¥ng t√¨m th·∫•y {extracted_chromium}")
                else:
                    print(f"‚ùå Kh√¥ng t√¨m th·∫•y {extracted_folder}")
            else:
                print(f"‚ùå Kh√¥ng th·ªÉ th·ª±c hi·ªán gi·∫£i n√©n v√¨ thi·∫øu file.")
            
        return None
  